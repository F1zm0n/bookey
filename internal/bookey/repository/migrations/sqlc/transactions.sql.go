// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: transactions.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (transaction_id,from_user_id,to_user_id,amount,description,transaction_date)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING transaction_id, from_user_id, to_user_id, amount, description, transaction_date
`

type CreateTransactionParams struct {
	TransactionID   uuid.UUID
	FromUserID      uuid.UUID
	ToUserID        uuid.UUID
	Amount          string
	Description     string
	TransactionDate time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.TransactionID,
		arg.FromUserID,
		arg.ToUserID,
		arg.Amount,
		arg.Description,
		arg.TransactionDate,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.FromUserID,
		&i.ToUserID,
		&i.Amount,
		&i.Description,
		&i.TransactionDate,
	)
	return i, err
}

const getUsersTransactions = `-- name: GetUsersTransactions :many
SELECT transaction_id, from_user_id, to_user_id, amount, description, transaction_date FROM transactions WHERE to_user_id=$1 OR from_user_id=$1
`

func (q *Queries) GetUsersTransactions(ctx context.Context, toUserID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getUsersTransactions, toUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.FromUserID,
			&i.ToUserID,
			&i.Amount,
			&i.Description,
			&i.TransactionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
