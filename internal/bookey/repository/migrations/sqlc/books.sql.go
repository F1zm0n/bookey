// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: books.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO Books (book_id,title,author,description,genre,price,user_id,created_at)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING book_id, title, author, description, genre, price, user_id, created_at
`

type CreateBookParams struct {
	BookID      uuid.UUID
	Title       string
	Author      string
	Description string
	Genre       string
	Price       int32
	UserID      uuid.UUID
	CreatedAt   time.Time
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.BookID,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.Genre,
		arg.Price,
		arg.UserID,
		arg.CreatedAt,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Genre,
		&i.Price,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookByID = `-- name: DeleteBookByID :exec
DELETE FROM Books WHERE book_id=$1
`

func (q *Queries) DeleteBookByID(ctx context.Context, bookID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBookByID, bookID)
	return err
}

const getBooksByAuthor = `-- name: GetBooksByAuthor :many
SELECT book_id, title, author, description, genre, price, user_id, created_at FROM Books WHERE author=$1
ORDER BY created_at DESC
LIMIT $2
`

type GetBooksByAuthorParams struct {
	Author string
	Limit  int32
}

func (q *Queries) GetBooksByAuthor(ctx context.Context, arg GetBooksByAuthorParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByAuthor, arg.Author, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Genre,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByGenre = `-- name: GetBooksByGenre :many
SELECT book_id, title, author, description, genre, price, user_id, created_at FROM Books WHERE genre=$1
ORDER BY created_at DESC
LIMIT $2
`

type GetBooksByGenreParams struct {
	Genre string
	Limit int32
}

func (q *Queries) GetBooksByGenre(ctx context.Context, arg GetBooksByGenreParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByGenre, arg.Genre, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Genre,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByTitle = `-- name: GetBooksByTitle :many
SELECT book_id, title, author, description, genre, price, user_id, created_at FROM Books WHERE title=$1
ORDER BY created_at DESC
LIMIT $2
`

type GetBooksByTitleParams struct {
	Title string
	Limit int32
}

func (q *Queries) GetBooksByTitle(ctx context.Context, arg GetBooksByTitleParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByTitle, arg.Title, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Genre,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByUserID = `-- name: GetBooksByUserID :many
SELECT book_id, title, author, description, genre, price, user_id, created_at FROM Books WHERE user_id=$1
ORDER BY created_at DESC
LIMIT $2
`

type GetBooksByUserIDParams struct {
	UserID uuid.UUID
	Limit  int32
}

func (q *Queries) GetBooksByUserID(ctx context.Context, arg GetBooksByUserIDParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Genre,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
